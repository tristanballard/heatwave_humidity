#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by pcmdi.llnl.gov - 2016/07/07 15:22:25
# Search URL: http://pcmdi.llnl.gov/esg-search/wget/?distrib=false&query=tasmax huss&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r8i1p1.v1|aims3.llnl.gov&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r7i1p1.v1|aims3.llnl.gov&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r9i1p1.v1|aims3.llnl.gov&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r10i1p1.v1|aims3.llnl.gov
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=https://hydra.fsl.noaa.gov/esgf-idp/openid/tristan.ballard
search_url='http://pcmdi.llnl.gov/esg-search/wget/?distrib=false&query=tasmax huss&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r8i1p1.v1|aims3.llnl.gov&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r7i1p1.v1|aims3.llnl.gov&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r9i1p1.v1|aims3.llnl.gov&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r10i1p1.v1|aims3.llnl.gov'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19500101-19691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19500101-19691231.nc' 'SHA256' '300414bfb7391d693c9f553c0594fe72383a908bed944d80944360547cdb30ae'
'huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19300101-19491231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19300101-19491231.nc' 'SHA256' '63c74dd779e1b457c7a4b0a65ef69f04633c4717e6fb84602fe0c653caa10f24'
'huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19100101-19291231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19100101-19291231.nc' 'SHA256' 'f8322e170392f6b54943d59ad9f3f48272bf6ec8ab4ade7945b9676ee4e20aff'
'huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19700101-19891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19700101-19891231.nc' 'SHA256' '49ad5e3514cb5ea5e44824a3bbb515fe6db48e28359da0a5f2b6793a3ce3782a'
'huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_18700101-18891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_18700101-18891231.nc' 'SHA256' '5279e1a19000809eb2380933aa1f0dfbeee8c0ccf10fdb09b423bcdf9eb78749'
'huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_18500101-18691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_18500101-18691231.nc' 'SHA256' 'f4e08d0da325ab0c81e69f6a683655048837469a07afac37e42ba57ad5e7f8ed'
'huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19500101-19691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19500101-19691231.nc' 'SHA256' '87714c4095653291dc9bdeca640763c8f5f0cdeeb41839f11da49c678ec1b61d'
'huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19300101-19491231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19300101-19491231.nc' 'SHA256' '5d266ea193fde3cd9484dae7b77685f374fe6c65fd9e21ffb0ae3ae2bbf5ed18'
'huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19100101-19291231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19100101-19291231.nc' 'SHA256' '7f72cd9487bfbd5e8829908d260dacf56053c55f20c092ace22ac11d3b3f0792'
'huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_18900101-19091231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_18900101-19091231.nc' 'SHA256' '27e164b0df96753fb867968f0fd502ab2b34a5626b80969c253a3a2f07da6a92'
'huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_18700101-18891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_18700101-18891231.nc' 'SHA256' '6afb34249b0ac499716e38bc376fdd22e21c7fc7d8c37822fdfc8fb8b3f06cb8'
'huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19900101-20051231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_19900101-20051231.nc' 'SHA256' '228a85ca2b6a474ebeb0f7cdf3f7597b907695963949534727f86c331e19f2f5'
'huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_18900101-19091231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_18900101-19091231.nc' 'SHA256' '45e787592f6842786bf97d5bb439302f189ec5385eed5f26e2055b8666a010e9'
'huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_18900101-19091231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_18900101-19091231.nc' 'SHA256' 'a68db0f7a3a39cb2f7ea233d5a9f84572c5524a6e9c62318de13323b33582c40'
'huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_18500101-18691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_18500101-18691231.nc' 'SHA256' '7b00a945a3320f1b7829e5442db330ce3db4651543433d71c7e068a647362dd6'
'huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_18700101-18891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_18700101-18891231.nc' 'SHA256' '97f223dd6e044ed4f97d50ca2b75324810cf93136f1a16599b40196a03ade366'
'huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19500101-19691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19500101-19691231.nc' 'SHA256' 'fff377d1690693e072b9cf28a3cd6d06388470c31a890e6e77e78237f6107b89'
'huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19900101-20051231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19900101-20051231.nc' 'SHA256' '7b0433c7e28960ef08c56238943443a7536b0aa430a6c8efaf9608f010414b3c'
'huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19700101-19891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19700101-19891231.nc' 'SHA256' 'd768e4420a1536e6bd306e921133467627326c147e03d12bfe68b8d7788914df'
'huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19300101-19491231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19300101-19491231.nc' 'SHA256' 'a3473e0f5ceb8acc9d8eeb5b63c409caa32983f3bea9c14032c2df79dd283e8c'
'huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19100101-19291231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_19100101-19291231.nc' 'SHA256' '691205cb1ecc727c5749cc87facc4580e90bd049f9fd594436342e86e5d2249b'
'huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_18700101-18891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_18700101-18891231.nc' 'SHA256' 'd4ba61dabdf180b61e4135c0fa87d79bd177cba5339452ab555b95fe44f69fed'
'huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_18900101-19091231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_18900101-19091231.nc' 'SHA256' '08113290031ae38391cdaea6a7959496230f59bd38467615bbeba94efc169b85'
'huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_18500101-18691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r7i1p1_18500101-18691231.nc' 'SHA256' '74f4f6f734e8835e26573014184f95b7a556c75c79599661c067871523926aab'
'huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_18500101-18691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r8i1p1_18500101-18691231.nc' 'SHA256' 'c1ebbe2a98ab33b1340e05cc29071036348b8308e4bc9321ce4be5f9ad5721b9'
'huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19100101-19291231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19100101-19291231.nc' 'SHA256' '9cb4bfae4c21ea34750b8ecda22998de33cdafcc3444b28f3ae5747d3d123ff9'
'huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19900101-20051231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19900101-20051231.nc' 'SHA256' '9a2134c80e3172542b7bdb459a05554dfbbfe2236cecbfdebb501de3c9af2842'
'huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19500101-19691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19500101-19691231.nc' 'SHA256' 'f19d5b417748eeef92bd4320dd0201e758776e0eb912e5372f0b1ea1d18d3866'
'huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19300101-19491231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19300101-19491231.nc' 'SHA256' '59b3402fed0420fbecd433b9041ab0424323cdb665bbb37ca3882ace380a5b61'
'huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19700101-19891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r10i1p1_19700101-19891231.nc' 'SHA256' '2273f7f8bb37239c6ab1deae76669de8a89bd4d2d83bd65eb78a809e48787167'
'huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19900101-20051231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19900101-20051231.nc' 'SHA256' '166477cce260f9fa82f7e369729a0216b33e40a4ba9099f29f668e057abcb938'
'huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19700101-19891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/huss/1/huss_day_CSIRO-Mk3-6-0_historical_r9i1p1_19700101-19891231.nc' 'SHA256' '4e842221f22c8fbf1e82e6656e847ee3a754115b8f5bfbe2199ce0b9f0153f55'
'tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19900101-20051231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19900101-20051231.nc' 'SHA256' '3b8ba5e2c4cf1c2f4c4eea47e717aaa71eaf984e30ee6bcb1df4cb978469bb99'
'tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19700101-19891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19700101-19891231.nc' 'SHA256' '92a5875ccda25b90afe9d438183799e0b03d977a462bbff1ff9b1ca4813b4a35'
'tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19500101-19691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19500101-19691231.nc' 'SHA256' '1c72a4a4e301048bc1f1de84589451dcf6d4bf35bdc0621e59c9535681ba5c86'
'tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19300101-19491231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19300101-19491231.nc' 'SHA256' 'db0695fa78cdd6c157d7f2b674e97b41d05612088e762742d2a52c4ed9ee133d'
'tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19100101-19291231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_19100101-19291231.nc' 'SHA256' 'bdfbd044c06aea8af1a6310dcf24d025507d2b168532a35e3b82636d947f3c7f'
'tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_18900101-19091231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_18900101-19091231.nc' 'SHA256' '78a3363ae851280827419d63a1269178cd5ec8d5a5455a84cb1f33cdbbe9bbfb'
'tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19500101-19691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19500101-19691231.nc' 'SHA256' 'b79a2850279e3cbc870f9370f7f1863fc58b69abdcd2b1497be3c4dfff31532e'
'tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19700101-19891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19700101-19891231.nc' 'SHA256' '2ec73f78e41d1731254d4dd4ba0d412a022cbd771483300ade167ed8a5a4fff3'
'tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19300101-19491231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19300101-19491231.nc' 'SHA256' '7dcc3593f85c6507afe922c6570ade08bce169516110d88d7b59a9b8fa2a4ee3'
'tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19100101-19291231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19100101-19291231.nc' 'SHA256' '1c262c435e19ab15c82307398b492b9c7f069237167fc837b2226864271d3c90'
'tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_18900101-19091231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_18900101-19091231.nc' 'SHA256' '22f14be9ead598a39c622e2617a173357a6ab4a897d31135ff8f3358fb390b6f'
'tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_18700101-18891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_18700101-18891231.nc' 'SHA256' '26330f9bc37ef4888596965a0af2fad2301e8e93a55485c3ab3fcada76a445d2'
'tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_18500101-18691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_18500101-18691231.nc' 'SHA256' '59a342b1030b09e03c32221d6d615ea43617167308bf9440142bb0c3a8714f7c'
'tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19900101-20051231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19900101-20051231.nc' 'SHA256' '1f5e3404d4ec8379741913b13cc60aa9b64f197bcd3f4dad5d4df525d8169b9e'
'tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19700101-19891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19700101-19891231.nc' 'SHA256' '7e9a9ddd654cd587d233ea13fc247d1829996c57b278224dd1f50fe6d05fe5e4'
'tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19100101-19291231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19100101-19291231.nc' 'SHA256' '4c3bce36f6baf150f49d9d56327edf32ca9b9487a501f73380425edd4e10188f'
'tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_18900101-19091231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_18900101-19091231.nc' 'SHA256' 'b7d98bef324761d3602d80bdfb0420a521348bc0ffb0c9a5c08eb249f183300e'
'tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_18700101-18891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_18700101-18891231.nc' 'SHA256' '60d6b582e5d6a2af8da0faf0667d3079476a08aaecce729314895d7585c7e835'
'tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_18500101-18691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_18500101-18691231.nc' 'SHA256' 'ef24799b9bd00b3568d88e26b68b0d4c75a568c4cb290e406038dbdfcbb157a7'
'tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_18900101-19091231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_18900101-19091231.nc' 'SHA256' '7ab167e1586042795b508bc5057d22674c8244c7516b0644ba6400d96a7db0e5'
'tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19500101-19691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19500101-19691231.nc' 'SHA256' '2741634ebb75aafa1d1bd27fc08bdc833cc979a1fe0e8f5a7952cd254113fc18'
'tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19300101-19491231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19300101-19491231.nc' 'SHA256' '5c2d3610c68e3ff66f1c3491a5e1a75126aad90070000472c28cec507a2c6328'
'tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19100101-19291231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_19100101-19291231.nc' 'SHA256' '1bbad29ebed25e1de3b72ab75a3b6d12dc2534f08ed1ea3a767c2e2cae7f88eb'
'tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_18700101-18891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_18700101-18891231.nc' 'SHA256' 'e2e52931a4db44c5a72fe229ec2b529981631e567ea8d1a32ed0a55781161595'
'tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_18500101-18691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r7i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r7i1p1_18500101-18691231.nc' 'SHA256' 'c12126d1f40bcf79a31e759388934e526f0c243f67384f116e9865e021602183'
'tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_18700101-18891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_18700101-18891231.nc' 'SHA256' 'f9233fb3c70175823fcf07a758efa731d10ea82f31ef18f6959b752fe30382e9'
'tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_18500101-18691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r8i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r8i1p1_18500101-18691231.nc' 'SHA256' '2786e53c659a2ddfdaa399450e8ef526ea41d58eec59b8dfa8796885ddeffc6e'
'tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19300101-19491231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19300101-19491231.nc' 'SHA256' '03c5aad2920c478a905fa73a402de01004ca6a414bb1d0fb2f5e529fb3a96baf'
'tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19900101-20051231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19900101-20051231.nc' 'SHA256' '84203976965dadaf7fb97781cf09daf42181bdac39024d28440ea096dce2ba4d'
'tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19700101-19891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19700101-19891231.nc' 'SHA256' '7e050f91232fff09c2d5a83372f183486fe24f8a1e2c74a8673f279325059386'
'tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19500101-19691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r10i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r10i1p1_19500101-19691231.nc' 'SHA256' '2b9a70a24687bef71e50abb7f95e094728ba81cf7b959389d3837ba1f8e0d73b'
'tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19900101-20051231.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip5_css02_data/cmip5/output1/CSIRO-QCCCE/CSIRO-Mk3-6-0/historical/day/atmos/day/r9i1p1/tasmax/1/tasmax_day_CSIRO-Mk3-6-0_historical_r9i1p1_19900101-20051231.nc' 'SHA256' '429d21d075b5f1adcf4a33adb07a9711a52496256650eff36899e228ddae7e1a'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java is required for retrieving the certificate and couldn't be found."
        exit 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        exit 1
    fi
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    check_java
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    
    #get password
    [[ ! "$pass" ]] && read -sp "MyProxy Password? " pass


    local args=
    [[ "$openId" ]] && args=$args" --oid $openId"
    [[ "$pass" ]] && args=$args" -P $pass"
    [[ "$username" ]] && args=$args" -l $username"
    
    echo -n $'\nRetrieving Credentials...' >&2
    if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
        echo "Certificate could not be retrieved"
        exit 1
    fi
    echo "done!" >&2
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 64 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
