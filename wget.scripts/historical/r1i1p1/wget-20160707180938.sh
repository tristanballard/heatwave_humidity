#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-index1.ceda.ac.uk - 2016/07/07 18:09:38
# Search URL: http://esgf-index1.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.CCCma.CanESM2.historical.day.atmos.day.r1i1p1.v20120410|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.BCC.bcc-csm1-1-m.historical.day.atmos.day.r1i1p1.v20120709|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.CSIRO-BOM.ACCESS1-0.historical.day.atmos.day.r1i1p1.v4|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.CSIRO-BOM.ACCESS1-3.historical.day.atmos.day.r1i1p1.v4|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MIROC.MIROC5.historical.day.atmos.day.r1i1p1.v20120710|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.BNU.BNU-ESM.historical.day.atmos.day.r1i1p1.v20120504|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MRI.MRI-ESM1.historical.day.atmos.day.r1i1p1.v20130307|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MOHC.HadGEM2-CC.historical.day.atmos.day.r1i1p1.v20110930|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.NSF-DOE-NCAR.CESM1-CAM5.historical.day.atmos.day.r1i1p1.v20140612|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MRI.MRI-CGCM3.historical.day.atmos.day.r1i1p1.v20120701|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.NOAA-GFDL.GFDL-CM3.historical.day.atmos.day.r1i1p1.v20120227|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.NCC.NorESM1-M.historical.day.atmos.day.r1i1p1.v20110901|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.NOAA-GFDL.GFDL-ESM2G.historical.day.atmos.day.r1i1p1.v20130130|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MIROC.MIROC4h.historical.day.atmos.day.r1i1p1.v20120628|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MIROC.MIROC-ESM-CHEM.historical.day.atmos.day.r1i1p1.v20120710|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.CNRM-CERFACS.CNRM-CM5.historical.day.atmos.day.r1i1p1.v20120530|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r1i1p1.v1|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MOHC.HadCM3.historical.day.atmos.day.r1i1p1.v20140110|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.INM.inmcm4.historical.day.atmos.day.r1i1p1.v20110323|esgf-data1.ceda.ac.uk
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=https://hydra.fsl.noaa.gov/esgf-idp/openid/tristan.ballard
search_url='http://esgf-index1.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.CCCma.CanESM2.historical.day.atmos.day.r1i1p1.v20120410|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.BCC.bcc-csm1-1-m.historical.day.atmos.day.r1i1p1.v20120709|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.CSIRO-BOM.ACCESS1-0.historical.day.atmos.day.r1i1p1.v4|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.CSIRO-BOM.ACCESS1-3.historical.day.atmos.day.r1i1p1.v4|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MIROC.MIROC5.historical.day.atmos.day.r1i1p1.v20120710|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.BNU.BNU-ESM.historical.day.atmos.day.r1i1p1.v20120504|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MRI.MRI-ESM1.historical.day.atmos.day.r1i1p1.v20130307|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MOHC.HadGEM2-CC.historical.day.atmos.day.r1i1p1.v20110930|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.NSF-DOE-NCAR.CESM1-CAM5.historical.day.atmos.day.r1i1p1.v20140612|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MRI.MRI-CGCM3.historical.day.atmos.day.r1i1p1.v20120701|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.NOAA-GFDL.GFDL-CM3.historical.day.atmos.day.r1i1p1.v20120227|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.NCC.NorESM1-M.historical.day.atmos.day.r1i1p1.v20110901|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.NOAA-GFDL.GFDL-ESM2G.historical.day.atmos.day.r1i1p1.v20130130|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MIROC.MIROC4h.historical.day.atmos.day.r1i1p1.v20120628|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MIROC.MIROC-ESM-CHEM.historical.day.atmos.day.r1i1p1.v20120710|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.CNRM-CERFACS.CNRM-CM5.historical.day.atmos.day.r1i1p1.v20120530|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.CSIRO-QCCCE.CSIRO-Mk3-6-0.historical.day.atmos.day.r1i1p1.v1|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.MOHC.HadCM3.historical.day.atmos.day.r1i1p1.v20140110|esgf-data1.ceda.ac.uk&dataset_id=cmip5.output1.INM.inmcm4.historical.day.atmos.day.r1i1p1.v20110323|esgf-data1.ceda.ac.uk'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tasmax_day_CESM1-CAM5_historical_r1i1p1_19200101-19541231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/tasmax/tasmax_day_CESM1-CAM5_historical_r1i1p1_19200101-19541231.nc' 'SHA256' '465e01f00c4b914aa47a908c5ae440ebbb822ce5ccf399866ebc76b7c39ae212'
'tasmax_day_CESM1-CAM5_historical_r1i1p1_19550101-19891231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/tasmax/tasmax_day_CESM1-CAM5_historical_r1i1p1_19550101-19891231.nc' 'SHA256' '7ec5d2a032f14eee07f2fbf09780ab756cfe5af2b686681c492f090c56413976'
'tasmax_day_CESM1-CAM5_historical_r1i1p1_18850101-19191231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/tasmax/tasmax_day_CESM1-CAM5_historical_r1i1p1_18850101-19191231.nc' 'SHA256' '501db421c6b332bef5359cc1db8a9e218271895e30789c51621972801eb48d32'
'tasmax_day_CESM1-CAM5_historical_r1i1p1_18500101-18841231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/tasmax/tasmax_day_CESM1-CAM5_historical_r1i1p1_18500101-18841231.nc' 'SHA256' '2830b702453571e3adba512004fa9d3987d1b757a6c5e0183bce4688b8210615'
'huss_day_CESM1-CAM5_historical_r1i1p1_18500101-18841231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/huss/huss_day_CESM1-CAM5_historical_r1i1p1_18500101-18841231.nc' 'SHA256' 'fbde57af46b45a8e766f65d76f9312b108c9715461ac1e7777e75f2b67a96a0a'
'huss_day_CESM1-CAM5_historical_r1i1p1_19900101-20051231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/huss/huss_day_CESM1-CAM5_historical_r1i1p1_19900101-20051231.nc' 'SHA256' '1ec11ad367558daab8b86139d191450e93308f1e85adcec210fd4b38620e4392'
'huss_day_CESM1-CAM5_historical_r1i1p1_19200101-19541231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/huss/huss_day_CESM1-CAM5_historical_r1i1p1_19200101-19541231.nc' 'SHA256' '4bbbbfda1e6da4898d4c59ea34f1c5169a7d8f933cf4533b94ddfa9bca24b8e1'
'huss_day_CESM1-CAM5_historical_r1i1p1_19550101-19891231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/huss/huss_day_CESM1-CAM5_historical_r1i1p1_19550101-19891231.nc' 'SHA256' 'fd4e9697d73491ce0b946deb3224d1a4dce0deb55f473b688d97e9ea7c7a9bcb'
'huss_day_CESM1-CAM5_historical_r1i1p1_18850101-19191231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/huss/huss_day_CESM1-CAM5_historical_r1i1p1_18850101-19191231.nc' 'SHA256' 'ee142c2181abc38d41c8b418335fb44f8783e04411a7a21414890bb671a050b4'
'tasmax_day_CESM1-CAM5_historical_r1i1p1_19900101-20051231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NSF-DOE-NCAR/CESM1-CAM5/historical/day/atmos/day/r1i1p1/v20140612/tasmax/tasmax_day_CESM1-CAM5_historical_r1i1p1_19900101-20051231.nc' 'SHA256' '74f34dcfdbbde1363cd50552a4b75f80c38cf20fadccbb351bb1508615cdf7bd'
'huss_day_NorESM1-M_historical_r1i1p1_20000101-20051231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/historical/day/atmos/day/r1i1p1/v20110901/huss/huss_day_NorESM1-M_historical_r1i1p1_20000101-20051231.nc' 'SHA256' 'fd08b09c7db445adf0a65b452b618d7b865c3becf71d277d0f3ff5d9a19c3cc7'
'huss_day_NorESM1-M_historical_r1i1p1_18500101-18991231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/historical/day/atmos/day/r1i1p1/v20110901/huss/huss_day_NorESM1-M_historical_r1i1p1_18500101-18991231.nc' 'SHA256' '240e024c1017c4b74678002fdde5a17811d57b6a3ce57f2c80f213920fe9401e'
'huss_day_NorESM1-M_historical_r1i1p1_19500101-19991231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/historical/day/atmos/day/r1i1p1/v20110901/huss/huss_day_NorESM1-M_historical_r1i1p1_19500101-19991231.nc' 'SHA256' '69260025ec1d1b067724a643d655b35bd1c679969321dbaf43b71d455dc312be'
'huss_day_NorESM1-M_historical_r1i1p1_19000101-19491231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/historical/day/atmos/day/r1i1p1/v20110901/huss/huss_day_NorESM1-M_historical_r1i1p1_19000101-19491231.nc' 'SHA256' '1cef5d4ac87e38180a045e36e60058f0f6a1c35bf0525e8088ab080a10f212fb'
'tasmax_day_NorESM1-M_historical_r1i1p1_20000101-20051231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/historical/day/atmos/day/r1i1p1/v20110901/tasmax/tasmax_day_NorESM1-M_historical_r1i1p1_20000101-20051231.nc' 'SHA256' '0111f2c0be5ed7b74898cf26f39dc9214f3a62dff3945925141462d4841dbabc'
'tasmax_day_NorESM1-M_historical_r1i1p1_19000101-19491231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/historical/day/atmos/day/r1i1p1/v20110901/tasmax/tasmax_day_NorESM1-M_historical_r1i1p1_19000101-19491231.nc' 'SHA256' '0e62ffb5d5548c061661a2591f0b901d2abcc3a2a55170f272596c23c48916c2'
'tasmax_day_NorESM1-M_historical_r1i1p1_19500101-19991231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/historical/day/atmos/day/r1i1p1/v20110901/tasmax/tasmax_day_NorESM1-M_historical_r1i1p1_19500101-19991231.nc' 'SHA256' '29a3c3429e9ad06fae1e800aa43bb290fe3093108197074727b021e57fe337a8'
'tasmax_day_NorESM1-M_historical_r1i1p1_18500101-18991231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/historical/day/atmos/day/r1i1p1/v20110901/tasmax/tasmax_day_NorESM1-M_historical_r1i1p1_18500101-18991231.nc' 'SHA256' '2d19875fc9a968a65df41b30447dd3d01f0fff0d12181c1961fe00ac0a9ce695'
'huss_day_GFDL-ESM2G_historical_r1i1p1_18910101-18951231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_18910101-18951231.nc' 'SHA256' '911ec32a223e1592ab855e5e0faf94d55fe4f67403425db217aa5d78e96111c9'
'huss_day_GFDL-ESM2G_historical_r1i1p1_18960101-19001231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_18960101-19001231.nc' 'SHA256' '2033c6f4f659b469bb76f13720644f48ace830a9a8e83f6937c541df1684c107'
'huss_day_GFDL-ESM2G_historical_r1i1p1_18860101-18901231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_18860101-18901231.nc' 'SHA256' 'd4e66ddb1b9c7d60d14a1a0f7d2192ee1ad13f9db54f905ae79f0750723ddae8'
'huss_day_GFDL-ESM2G_historical_r1i1p1_18810101-18851231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_18810101-18851231.nc' 'SHA256' '6f3521be77f71b750d8995f096d115f16bc3025d955be484d1c2455e1d39ecc8'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19010101-19051231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19010101-19051231.nc' 'SHA256' '5003607041a1c35a754338299995eebde07931596407307e08adce1770c51654'
'huss_day_GFDL-ESM2G_historical_r1i1p1_18610101-18651231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_18610101-18651231.nc' 'SHA256' 'a9b150d5dd35f1c5727f0a0bd793e8ed9e60bb546086d7bca1e5b29e616e97da'
'huss_day_GFDL-ESM2G_historical_r1i1p1_18660101-18701231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_18660101-18701231.nc' 'SHA256' '5b72fe6b40d691aa0eb1493d2136889b195ffdaf803d23e0834d878d744e8bd9'
'huss_day_GFDL-ESM2G_historical_r1i1p1_18760101-18801231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_18760101-18801231.nc' 'SHA256' '626975053cc2b562b78b26c9859127819191a6c7e05235836b07996b82c726c9'
'huss_day_GFDL-ESM2G_historical_r1i1p1_18710101-18751231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_18710101-18751231.nc' 'SHA256' '724c119a9eded0600ea4f38d75838e2099f87bde58123ea173ac006a10868428'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19660101-19701231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19660101-19701231.nc' 'SHA256' '52be109fc5af8c144cd8cf172b733baf7976afd71ac854e6e825187fa8972e07'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19760101-19801231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19760101-19801231.nc' 'SHA256' '41677ba5c25dce138494ef9020aaa2165dd898853b999402e8ff9357ed0f1e1d'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19860101-19901231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19860101-19901231.nc' 'SHA256' '7d973cd15bb2944c60d833e0a76b5ec70d2f1359b6bc6ac3d92f598c552e6ae9'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19910101-19951231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19910101-19951231.nc' 'SHA256' 'f457ecac54bbb6351f99ec8b4db0d6513a0f1a8ce67f68d42449daefd560ef39'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19810101-19851231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19810101-19851231.nc' 'SHA256' '44ebb6444be8ab731136f753a38deef0f5902dea07d7df310993c6624d0a856d'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19710101-19751231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19710101-19751231.nc' 'SHA256' '1ee7e904c9edb9fc91e47b48bb7a4af18f936aaaebcdfa00edd7cd32488e2df9'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19610101-19651231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19610101-19651231.nc' 'SHA256' '330bb6449157c067f560ba7a9463d0ce28cf15a19df6ca9325ec38109ac70def'
'huss_day_GFDL-ESM2G_historical_r1i1p1_20010101-20051231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_20010101-20051231.nc' 'SHA256' 'ea8bd403255da0d65e84176a778998af88b9de006a722c63d578755063d6a7b3'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19960101-20001231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19960101-20001231.nc' 'SHA256' '3775c6f4569df850ea4efc0f585283c267bc2c3cf5ef81e079fc8c585aefd868'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19060101-19101231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19060101-19101231.nc' 'SHA256' '96baf90266c62f3d9e1c3e7185a36328576cf1e50a50ea2c6c4609bc0a59f559'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19160101-19201231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19160101-19201231.nc' 'SHA256' 'c8f4e65534b5e8da15363282cc97c6735aaab8cbb0041cda70c78d7949caed95'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19110101-19151231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19110101-19151231.nc' 'SHA256' 'ab0d44e39fbe3f6a9afe0e209a3b51b24eb325cca9f5040534a91dac2e06c39b'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19460101-19501231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19460101-19501231.nc' 'SHA256' 'e74d267cf5faf83c0ec22c1fdcc824e787e8613e8c6aa9d84622ebc67be79b93'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19560101-19601231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19560101-19601231.nc' 'SHA256' '0692e5fc21d3e63b10abe3ba80418e75bbf976354e29b4e5d026e03200c831b5'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19510101-19551231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19510101-19551231.nc' 'SHA256' '3de6c5da200df728d19d16ba2fb1ea053f4e0c995ded8018d5aeeb0fca79a770'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19360101-19401231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19360101-19401231.nc' 'SHA256' 'ecb20ca2a1a9c3b5bd0a011b4cfe76d895852f6a0e23fc8d3cede16c296af60e'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19410101-19451231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19410101-19451231.nc' 'SHA256' '20b71b2669c01764d6eb1f26b6cd66a69c1b2741c2ee833a463d0e98e29aa81e'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19310101-19351231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19310101-19351231.nc' 'SHA256' 'f68f8b2ebf553612324ec1a4407a308abf63c9815046c4c9c63297a1265db0c9'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19260101-19301231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19260101-19301231.nc' 'SHA256' 'd721029ae44823067420d3bf555f0c544fcf369ca10a27e5249f906d2c8f2ee9'
'huss_day_GFDL-ESM2G_historical_r1i1p1_19210101-19251231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-ESM2G/historical/day/atmos/day/r1i1p1/v20130130/huss/huss_day_GFDL-ESM2G_historical_r1i1p1_19210101-19251231.nc' 'SHA256' 'cd5c032b54ecd5b1e56dba37f7ac9faf59a55b400a688ed06ad37155063d86b0'
'huss_day_GFDL-CM3_historical_r1i1p1_19400101-19441231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19400101-19441231.nc' 'SHA256' '48627a2e32d46e89fb79110461f5fc004350756a552d61664fb2afda277a8b6e'
'huss_day_GFDL-CM3_historical_r1i1p1_19550101-19591231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19550101-19591231.nc' 'SHA256' 'e0694ff43cef145613f09224777190cbe3e7e55015be201e8493670891b24d3c'
'huss_day_GFDL-CM3_historical_r1i1p1_19500101-19541231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19500101-19541231.nc' 'SHA256' '55f947ce00ff8df595838b4bcf43164f5e577ff5d90a02e42918196646edb613'
'huss_day_GFDL-CM3_historical_r1i1p1_19450101-19491231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19450101-19491231.nc' 'SHA256' '9bb3752b9b4a5bdc24e0c46cf5aa73f860443bf547b65da573069a6cd436cafe'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19850101-19891231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19850101-19891231.nc' 'SHA256' '0567ef89e4719bdf3ef8ed37a60bac43808b9fcaaf7ae063deda7380734d1734'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19700101-19741231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19700101-19741231.nc' 'SHA256' '0a607f2fe9562d2781167fe65f7881b7afbda1a3025379102b49d67d125a7005'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19650101-19691231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19650101-19691231.nc' 'SHA256' '365276be2077b371cd692cb1d861014d8debdeb7741e1dc484947882074cadaa'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19750101-19791231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19750101-19791231.nc' 'SHA256' '722f357849a38900338bb5aa46b26a3591522bb5c7cfc8cc6ca49bfc7a9f390c'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19800101-19841231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19800101-19841231.nc' 'SHA256' 'd7992f729bd83374f71df4ac4acf2eb5c3fdbe6cc6daf4af8d1e9e4509c6252c'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19600101-19641231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19600101-19641231.nc' 'SHA256' '0b339de6df648cf7a6c1b7fecda72e7e37dfa9128f26099bdca1d47ff3875528'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19550101-19591231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19550101-19591231.nc' 'SHA256' '614d807424f22d2dc4a7874ccab2f3bd86941aeeb66a2e926089a53f87d4ade5'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19900101-19941231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19900101-19941231.nc' 'SHA256' '24d4aadbd68696605437e5036037789c131033085d687dee3bf894f0eda875ed'
'huss_day_GFDL-CM3_historical_r1i1p1_19150101-19191231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19150101-19191231.nc' 'SHA256' 'ecc29909f5be85027270a9c9fcb8e00d53c7a08ee2fd8bacc7172faefe90b7c3'
'huss_day_GFDL-CM3_historical_r1i1p1_19100101-19141231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19100101-19141231.nc' 'SHA256' '9e17e908b245b2c0975f45a673434b6bff1c7e7122f86d8363d1347b32e1b391'
'huss_day_GFDL-CM3_historical_r1i1p1_19350101-19391231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19350101-19391231.nc' 'SHA256' '5c5ca1d7276dae3b3d40c5ac81ab286c547ecaf568dffacd0a59cc9f33c23c8b'
'huss_day_GFDL-CM3_historical_r1i1p1_19300101-19341231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19300101-19341231.nc' 'SHA256' '83596807b0771ef3bbc2ad9bdb82711e01e25b59a9bdbbc1e18a7928c4584eb3'
'huss_day_GFDL-CM3_historical_r1i1p1_19200101-19241231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19200101-19241231.nc' 'SHA256' '45f5348c44514ea54353404ceb7edfa916dc2e4fcd6f6d8afa1dec5af844d1d0'
'huss_day_GFDL-CM3_historical_r1i1p1_19250101-19291231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_19250101-19291231.nc' 'SHA256' 'ae8c45a87cc83d8d49735b9c9ebc64421a97ecdbb31379118ef5e919db0cb4be'
'tasmax_day_GFDL-CM3_historical_r1i1p1_18950101-18991231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_18950101-18991231.nc' 'SHA256' 'e7251e4eb93913bc7a475b9c41ba41b7d953b177338ef771386a3c0532b37329'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19000101-19041231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19000101-19041231.nc' 'SHA256' 'a039a1c3c2d49c924df67cd230d75ecda7876e73b250b1fe3f32257cde1f59c8'
'tasmax_day_GFDL-CM3_historical_r1i1p1_18900101-18941231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_18900101-18941231.nc' 'SHA256' '509a3278dfb840185b4deffffea23fe2bc31881c116aecb30464d1cc545fcbf8'
'tasmax_day_GFDL-CM3_historical_r1i1p1_18850101-18891231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_18850101-18891231.nc' 'SHA256' '542db73da9a0b014167fa7477c34a8a1d855059c1f86af74c91b4ddb4d88c99b'
'tasmax_day_GFDL-CM3_historical_r1i1p1_18650101-18691231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_18650101-18691231.nc' 'SHA256' '1e1a67c85b4bbfd602b73736612b3c0d888424b825638cb9be3a5c2a76da45a8'
'tasmax_day_GFDL-CM3_historical_r1i1p1_18700101-18741231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_18700101-18741231.nc' 'SHA256' '162df3b82a55f8ddf82a51f56c80f147303ca33c3a485332fc4c6e45d3e01c98'
'tasmax_day_GFDL-CM3_historical_r1i1p1_18800101-18841231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_18800101-18841231.nc' 'SHA256' 'd00d0ef6a8bcb90ae46eba164ba951e0762baa9062ee52067b231aa587fb6b5b'
'tasmax_day_GFDL-CM3_historical_r1i1p1_18750101-18791231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_18750101-18791231.nc' 'SHA256' 'b0f163f7b75f48c908cda5cdedcd27d324d48afe6f9146a2c72f414003072acc'
'huss_day_GFDL-CM3_historical_r1i1p1_18800101-18841231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_18800101-18841231.nc' 'SHA256' 'f15a8ba628220f490365e65ca3418cf3e07c4e4eb2de58f11360777b776f0721'
'huss_day_GFDL-CM3_historical_r1i1p1_18700101-18741231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_18700101-18741231.nc' 'SHA256' '3f05cc18f8026a817deac9bb88991dcbc30eaf9e095697545fbad9921884dd28'
'huss_day_GFDL-CM3_historical_r1i1p1_18650101-18691231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_18650101-18691231.nc' 'SHA256' '76d75c53c30652040fd1ef0dfe496ba001d56e05b335399dca207b40affbdbcc'
'huss_day_GFDL-CM3_historical_r1i1p1_18750101-18791231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_18750101-18791231.nc' 'SHA256' '6eb3b6bbb2085f22c50b4e4218cf5221d956ca737465609255cd7c13f5d5ec2c'
'huss_day_GFDL-CM3_historical_r1i1p1_18850101-18891231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_18850101-18891231.nc' 'SHA256' '6bb5c68945e4734f9bcab90fc917f9ddfaa0a83061bc44e1f6536af884e8fa82'
'huss_day_GFDL-CM3_historical_r1i1p1_18600101-18641231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/huss/huss_day_GFDL-CM3_historical_r1i1p1_18600101-18641231.nc' 'SHA256' 'fb5127c0bc6354ab61337512d528f7d0ecc73eb25cf8e2e5cdf4fe08db682baf'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19350101-19391231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19350101-19391231.nc' 'SHA256' '8909e6edb10447019bdbdcb2a9c63e1cdd15fba660feab9b1c1df64f5e451d2c'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19500101-19541231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19500101-19541231.nc' 'SHA256' '941dbf16d2fa28a4f86a5a3f7cdee4c241cad3c91f2e422213aa5ccab95f6071'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19450101-19491231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19450101-19491231.nc' 'SHA256' 'b583a0c0737ec5116cf2184fa5e487f0d79122db9ea9a005f05176718f1d557f'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19400101-19441231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19400101-19441231.nc' 'SHA256' 'a80d98025d3eb8fd73eedc3697306140804d93afed264478bb457ee435b57d96'
'tasmax_day_GFDL-CM3_historical_r1i1p1_18600101-18641231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_18600101-18641231.nc' 'SHA256' '9a6e0a215d58d351d562f584d228986e0c2579d6720c5ee393b2b0ff3eadc9c9'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19050101-19091231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19050101-19091231.nc' 'SHA256' 'e94d193c5c29a05b7ea9d0a76844e354065e350aff0429e680049a38d33852e6'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19100101-19141231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19100101-19141231.nc' 'SHA256' 'dc7d96bd8fec7507a10271cfb6fbed995d97b75b4c2d27e391bf3e42a3e67d41'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19200101-19241231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19200101-19241231.nc' 'SHA256' '477aacd02fa34de90f02aacd0ed0850999aabd45f00e8614e8693c5b06a486b6'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19300101-19341231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19300101-19341231.nc' 'SHA256' '98976602e7913901ff98d7620621ca227473d6dae4a910701255669880a0cfb9'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19250101-19291231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19250101-19291231.nc' 'SHA256' 'b3788212485751fbbf77b0c24d76c8dcad127ff78c48b4800a98358e5d4190ae'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19150101-19191231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19150101-19191231.nc' 'SHA256' '2a1a0278c8c6e76e1d7afe1ce65f8bcbedd594d50dfbb180e8942e7f53a24ec3'
'tasmax_day_GFDL-CM3_historical_r1i1p1_20000101-20041231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_20000101-20041231.nc' 'SHA256' 'b2f4bcdc2647d3e7685f18fa6e1f1a4b50cf7aef429ce94ca081c70580ac0ed1'
'tasmax_day_GFDL-CM3_historical_r1i1p1_20050101-20051231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_20050101-20051231.nc' 'SHA256' '4b76f044b08cbceb96c50488e981b9118f42a819559695fc3251c23a9ce6607b'
'tasmax_day_GFDL-CM3_historical_r1i1p1_19950101-19991231.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NOAA-GFDL/GFDL-CM3/historical/day/atmos/day/r1i1p1/v20120227/tasmax/tasmax_day_GFDL-CM3_historical_r1i1p1_19950101-19991231.nc' 'SHA256' 'f05ee716d66a643a8d28dfdb6d352eb4db39d8963ab05ecfc0d3b42c424a9bd1'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
TRUSTSTORE=$ESG_HOME/esg-truststore.ts
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java is required for retrieving the certificate and couldn't be found."
        exit 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        exit 1
    fi
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

#get truststore from github
get_truststore() {
    # don't if this was already done today
    [[ -z $force && "$(find $TRUSTSTORE -type f -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Truststore..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg-truststore.ts -O $TRUSTSTORE -q ; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg-truststore.ts -O $TRUSTSTORE
        echo "Could't update truststore!" >&2
        return 1
    else
        touch $TRUSTSTORE
    fi
    
    echo "done!" >&2    
}

# Retrieve ESG credentials
unset pass
get_credentials() {
    check_java
    #get all certificates
    get_certificates
    #get truststore 
    get_truststore
    
    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    
    #get password
    [[ ! "$pass" ]] && read -sp "MyProxy Password? " pass


    local args=
    [[ "$openId" ]] && args=$args" --oid $openId"
    [[ "$pass" ]] && args=$args" -P $pass"
    [[ "$username" ]] && args=$args" -l $username"
    
    echo -n $'\nRetrieving Credentials...' >&2
    if ! java $(proxy_to_java) -Djavax.net.ssl.trustStore=$TRUSTSTORE -Djavax.net.ssl.trustStorePassword=changeit -jar $MYPROXY_GETCERT $args --output $ESG_CREDENTIALS ; then        
        echo "Certificate could not be retrieved"
        exit 1
    fi
    echo "done!" >&2
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

get_mod_time_() {
    if ((LINUX)); then
        #on linux modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    elif ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Warning! The total number of files was 6874 but this script will only process 1000.
Script created for 1000 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
