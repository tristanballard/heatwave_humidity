#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by pcmdi.llnl.gov - 2016/07/07 12:30:04
# Search URL: http://pcmdi.llnl.gov/esg-search/wget/?distrib=false&query=tasmax huss&dataset_id=cmip5.output1.MIROC.MIROC4h.historical.day.atmos.day.r2i1p1.v20120628|esgf-data1.diasjp.net&dataset_id=cmip5.BCC.bcc-csm1-1-m.historical.day.atmos.day.r2i1p1.v20120709|aims3.llnl.gov
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=https://hydra.fsl.noaa.gov/esgf-idp/openid/tristan.ballard
search_url='http://pcmdi.llnl.gov/esg-search/wget/?distrib=false&query=tasmax huss&dataset_id=cmip5.output1.MIROC.MIROC4h.historical.day.atmos.day.r2i1p1.v20120628|esgf-data1.diasjp.net&dataset_id=cmip5.BCC.bcc-csm1-1-m.historical.day.atmos.day.r2i1p1.v20120709|aims3.llnl.gov'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'huss_day_MIROC4h_historical_r2i1p1_20050101-20051231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_20050101-20051231.nc' 'SHA256' '507365c6e989f8d6b19d4284f33e88f8a43f47c5b45627aa07a5302775e4081a'
'huss_day_MIROC4h_historical_r2i1p1_20040101-20041231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_20040101-20041231.nc' 'SHA256' '6eb6241d428f7cd17ac6186051e417029d209984d6fe248260c3efb9b81041c4'
'huss_day_MIROC4h_historical_r2i1p1_20030101-20031231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_20030101-20031231.nc' 'SHA256' 'ae446c8d28a6edabc028ffa18087553f66b65adff3fb3739e626dbd947b81a43'
'huss_day_MIROC4h_historical_r2i1p1_20020101-20021231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_20020101-20021231.nc' 'SHA256' '1251c8c5593e9ae24513dc812631667713de028409e44cfe161cba922a1ced1b'
'huss_day_MIROC4h_historical_r2i1p1_19750101-19751231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19750101-19751231.nc' 'SHA256' '62c3c290aa3d11b99b1a7f67bcaf5d11f3d925c02b8c7795746ae8da35e91be0'
'huss_day_MIROC4h_historical_r2i1p1_19770101-19771231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19770101-19771231.nc' 'SHA256' '1b6b6c4bc6831ade0e3e8eb3a2b5833701a2b5fcfca8e0096850b6da0feb6c2b'
'huss_day_MIROC4h_historical_r2i1p1_19830101-19831231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19830101-19831231.nc' 'SHA256' '93626eac7e6f2509c9c1daa554d59e8534d45e15cab8a1033cdaf8b8362fd26a'
'huss_day_MIROC4h_historical_r2i1p1_19760101-19761231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19760101-19761231.nc' 'SHA256' '9311e3c433510a89380c96a57db54c7868a0fde29896b917a41392dfd6c8d7d9'
'huss_day_MIROC4h_historical_r2i1p1_19820101-19821231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19820101-19821231.nc' 'SHA256' '1f8c09a0e946d104b9e6b8b5c3dd5bf689640ddec250d25b6fd710a2bd6a561b'
'huss_day_MIROC4h_historical_r2i1p1_19810101-19811231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19810101-19811231.nc' 'SHA256' '3f962f7cae0923cd71a1e6afe52f8c3f9755c9531ffc4619e8b877cd5cc9c4b1'
'huss_day_MIROC4h_historical_r2i1p1_19800101-19801231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19800101-19801231.nc' 'SHA256' '468e9db549e44f17b8f190cd7eaedbc97b75357b98e61e33ae26079d6b58f219'
'huss_day_MIROC4h_historical_r2i1p1_19790101-19791231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19790101-19791231.nc' 'SHA256' 'a431c94681ea12054ed615fc6dc5450f4112be03d2f6dd9d813663266023300f'
'huss_day_MIROC4h_historical_r2i1p1_19780101-19781231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19780101-19781231.nc' 'SHA256' '6488ea1b7204dc81a0b3bf0cbcc06fde416270b18de1bdc3b9ac39e58ce72f1f'
'huss_day_MIROC4h_historical_r2i1p1_19560101-19561231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19560101-19561231.nc' 'SHA256' '24c4ab4e551231d0a2e20f4408c55f7e0f191c2638991d13b188ff026a95a181'
'huss_day_MIROC4h_historical_r2i1p1_19550101-19551231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19550101-19551231.nc' 'SHA256' '3375c12376d3fbe1c745a85f51a2e5d49263f807361916e08516eb40f2817340'
'huss_day_MIROC4h_historical_r2i1p1_19540101-19541231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19540101-19541231.nc' 'SHA256' 'd68346ad14b3eacac383ff3c93d82564778b45701e881927f993afc115ac08f8'
'huss_day_MIROC4h_historical_r2i1p1_19530101-19531231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19530101-19531231.nc' 'SHA256' 'd61b4df79328d4194c7e44cbb65eba6814b695eb7d247257cef36da8c96abf42'
'huss_day_MIROC4h_historical_r2i1p1_19520101-19521231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19520101-19521231.nc' 'SHA256' 'b42c3b7349ee55d82495cd860f8bd4d8d47c4303c1f688fd9f727e2735d4ca7c'
'huss_day_MIROC4h_historical_r2i1p1_19510101-19511231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19510101-19511231.nc' 'SHA256' '7bb2cae3381c86b176662f578c41bfeadfcec1c5317cd646740f1ba1ccf4a98c'
'huss_day_MIROC4h_historical_r2i1p1_19500101-19501231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19500101-19501231.nc' 'SHA256' '874912ac54a4a36baa059766ff8cce63b6951865f2d6aa9e64ab92169e4ae9fc'
'huss_day_MIROC4h_historical_r2i1p1_19910101-19911231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19910101-19911231.nc' 'SHA256' '01d9fb09a06e8e824335272005bb914ebf97bc8bfc971bb90775f07c54c78367'
'huss_day_MIROC4h_historical_r2i1p1_19880101-19881231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19880101-19881231.nc' 'SHA256' '078d218a5ae64517c0f69d831f5f632137e6cb2b522c080c4eec7576bbcd8236'
'huss_day_MIROC4h_historical_r2i1p1_19920101-19921231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19920101-19921231.nc' 'SHA256' '3a647e552ab02b8565f50300f76e046d6ace0de670920b975e8fb3499633cd86'
'huss_day_MIROC4h_historical_r2i1p1_19900101-19901231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19900101-19901231.nc' 'SHA256' '29e4bcb91fe87e59c299480a24fa12c5a7c93bf9c59a60a22578c263803439ae'
'huss_day_MIROC4h_historical_r2i1p1_19850101-19851231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19850101-19851231.nc' 'SHA256' '660e6e04b477a84d10a9288226f70834da564536c402bf786eff780350d6f134'
'huss_day_MIROC4h_historical_r2i1p1_19870101-19871231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19870101-19871231.nc' 'SHA256' '9699c5ba58c44b1765505bdd1c65cf20324b627cbb6132aa5732e86307f5f34b'
'huss_day_MIROC4h_historical_r2i1p1_19840101-19841231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19840101-19841231.nc' 'SHA256' '16a242fccfe418b06ca25e4e6c64dc531d6705a6874043753e64e322cf317e35'
'huss_day_MIROC4h_historical_r2i1p1_19890101-19891231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19890101-19891231.nc' 'SHA256' '6c6129581d4e99ff83895300a13cb64a1bf28238b4df9af5084921b97742a23d'
'huss_day_MIROC4h_historical_r2i1p1_19860101-19861231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19860101-19861231.nc' 'SHA256' '2dd405aeebda793bcb599843e76565cbff8d6c96cd3c4ea18ffecb2be5500f7c'
'huss_day_MIROC4h_historical_r2i1p1_19650101-19651231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19650101-19651231.nc' 'SHA256' 'da13ea4e8946b016d984b46fbc21fbfe2aaf4346e585c1b9ee801bbc260fedca'
'huss_day_MIROC4h_historical_r2i1p1_19640101-19641231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19640101-19641231.nc' 'SHA256' '1d2c5a877990e26afcc1f5226c3f3b9ae8239c000aeb5292be0dda5be832c46f'
'huss_day_MIROC4h_historical_r2i1p1_19630101-19631231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19630101-19631231.nc' 'SHA256' 'fdb661424672b5e8d1d90106ed0932bd8457d49479e9ef688ebe6ce31ce5d6bb'
'huss_day_MIROC4h_historical_r2i1p1_19620101-19621231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19620101-19621231.nc' 'SHA256' '893a318d243fb0f311db94dc2e4ae1c2db77960470cbe7bdfbc7f46a7f85a57b'
'huss_day_MIROC4h_historical_r2i1p1_19610101-19611231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19610101-19611231.nc' 'SHA256' '382fbb9562209685fbabab85fd6c0bbac6c819dc561145fc79ab48eaa175697b'
'huss_day_MIROC4h_historical_r2i1p1_19600101-19601231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19600101-19601231.nc' 'SHA256' '995830c0dc5d5acb7abaa64f76e4d2f9e9f95ba5ab50ce64dd74544f7c809d52'
'huss_day_MIROC4h_historical_r2i1p1_19590101-19591231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19590101-19591231.nc' 'SHA256' 'd8c968b6cf80205987fb2fed60a27d816d79124bd0f43269f6040a1ba2fd9622'
'huss_day_MIROC4h_historical_r2i1p1_19580101-19581231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19580101-19581231.nc' 'SHA256' '465fb632fd5eec6c3f03caa6f59772d5316648ebff2d6406b93839176570b131'
'huss_day_MIROC4h_historical_r2i1p1_19570101-19571231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19570101-19571231.nc' 'SHA256' '389f212a31771f6a5a34dfea564505265ad90ebd0083c602b4fb67f35ae194c8'
'huss_day_MIROC4h_historical_r2i1p1_19980101-19981231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19980101-19981231.nc' 'SHA256' '245ef52c9a34d88222ac4e4e3fb427b199ff7ae86819436217004ccf97c72dbe'
'huss_day_MIROC4h_historical_r2i1p1_19990101-19991231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19990101-19991231.nc' 'SHA256' 'ba3ee3988dbc87cc8586e6fd48f28e55f8240c94850ded967e44cd9342108a30'
'huss_day_MIROC4h_historical_r2i1p1_19960101-19961231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19960101-19961231.nc' 'SHA256' 'b45f0b4d1783b7c8700b8b218132115703e9c9741640c563aa953ebd254e199f'
'huss_day_MIROC4h_historical_r2i1p1_19930101-19931231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19930101-19931231.nc' 'SHA256' 'e29dbdbd7aad33dde42ae63343ac5e9ebba07f9f74c056d20609ea98596207ba'
'huss_day_MIROC4h_historical_r2i1p1_20000101-20001231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_20000101-20001231.nc' 'SHA256' '292c8ab558c6da8b52d2c079b8feada7484ef1b7023dc9c6557ac27592fb9c4c'
'huss_day_MIROC4h_historical_r2i1p1_19970101-19971231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19970101-19971231.nc' 'SHA256' '24ba913f7752a93a5d30553a88de238378b66ee47723aff2f07cb3550ca07549'
'huss_day_MIROC4h_historical_r2i1p1_19950101-19951231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19950101-19951231.nc' 'SHA256' 'f70a65e167580afe40156f5eb94f026f3e13b47590560f6d25cda8f7126911f4'
'huss_day_MIROC4h_historical_r2i1p1_19940101-19941231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19940101-19941231.nc' 'SHA256' '698d656c642c293d0041fdaffae2b4cd269729dc6b4bb59b44e45f80d0d80882'
'huss_day_MIROC4h_historical_r2i1p1_20010101-20011231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_20010101-20011231.nc' 'SHA256' '5e011cbdd3ebba6f41090d41e1d6c363ca8d4499f25bb82164adc0218b3f778b'
'huss_day_MIROC4h_historical_r2i1p1_19740101-19741231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19740101-19741231.nc' 'SHA256' '3b4479c1d1f3f0e0acca58d9cc76d2944a7838c0878f70dfd68d15ad275860ad'
'huss_day_MIROC4h_historical_r2i1p1_19690101-19691231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19690101-19691231.nc' 'SHA256' 'b81a4d1acc3fd4d2c2a03602e5429f5efd7883f90b2b3f7887c373a2fe7747e1'
'huss_day_MIROC4h_historical_r2i1p1_19730101-19731231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19730101-19731231.nc' 'SHA256' '948ee6efaf29d4351dd213b5d530d3a1eba358230a1468d06617cfcce9f808af'
'huss_day_MIROC4h_historical_r2i1p1_19720101-19721231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19720101-19721231.nc' 'SHA256' '281d97cfe9b2011e78ee9d5b330b834a7c0d6d4bcaf1f336b574a41e139eb5fa'
'huss_day_MIROC4h_historical_r2i1p1_19710101-19711231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19710101-19711231.nc' 'SHA256' 'd21040cffc562c26fe69cf46ac7aace07b5aaf0042f105cb7f6d7a151d834689'
'huss_day_MIROC4h_historical_r2i1p1_19700101-19701231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19700101-19701231.nc' 'SHA256' '7b952b62cbd8e76dde16a3bdebd118d31544fe6af0dc07c504be68e6a859a23e'
'huss_day_MIROC4h_historical_r2i1p1_19680101-19681231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19680101-19681231.nc' 'SHA256' 'c6ff225ac22dece65f0e4f74179e335004b23b26f1ba2484995a231356af549e'
'huss_day_MIROC4h_historical_r2i1p1_19670101-19671231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19670101-19671231.nc' 'SHA256' '6af26e34bb77ddcb7dc149563eb1e27436ca239d77672d534c04ae83751cfe75'
'huss_day_MIROC4h_historical_r2i1p1_19660101-19661231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/huss/huss_day_MIROC4h_historical_r2i1p1_19660101-19661231.nc' 'SHA256' '829fba5099183c826b0ccc0d44dff58ec51714d4cb0581bbcba59ce5a3ab7b09'
'tasmax_day_MIROC4h_historical_r2i1p1_20040101-20041231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_20040101-20041231.nc' 'SHA256' '0620ce35d9a3e9c9e6c63055f2d643c8d3a54d1f40f17a23861b3b9be0936460'
'tasmax_day_MIROC4h_historical_r2i1p1_20050101-20051231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_20050101-20051231.nc' 'SHA256' '20efdb227157860ea3d9a7ce53023860751a9a9f06dd248d9b0d5fdcbf8d42c8'
'tasmax_day_MIROC4h_historical_r2i1p1_20020101-20021231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_20020101-20021231.nc' 'SHA256' '983fdf967fbfdaac73e4f37edd8e86fc0fb5454002ecfcf184f77e756240eb38'
'tasmax_day_MIROC4h_historical_r2i1p1_20030101-20031231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_20030101-20031231.nc' 'SHA256' '39da38e26203698e23e30aab285bd10caf4947602e23ef9ac3441c8f082c6665'
'tasmax_day_MIROC4h_historical_r2i1p1_19970101-19971231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19970101-19971231.nc' 'SHA256' 'aa250479148dac4757f785922e1a7f0eafc5dbd1c722a689db8843d4d14c6f74'
'tasmax_day_MIROC4h_historical_r2i1p1_19960101-19961231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19960101-19961231.nc' 'SHA256' '94a58e9c23e10785ec889bdb3f7d8a1f505ed8ca6d22a86db4cd5e03505920ff'
'tasmax_day_MIROC4h_historical_r2i1p1_20000101-20001231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_20000101-20001231.nc' 'SHA256' '874c2b4bd7cb4505107ac5c30e36bd60e81e30b6d60c216fbcce80acfe3d98f5'
'tasmax_day_MIROC4h_historical_r2i1p1_19950101-19951231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19950101-19951231.nc' 'SHA256' 'c13cc2b2293df9f253842a75c67abdcdb63f35381822a34023afcf45c38dafc4'
'tasmax_day_MIROC4h_historical_r2i1p1_19940101-19941231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19940101-19941231.nc' 'SHA256' '56cb46560a7fe582184000de9d570194cf3104f89f71e07facd96cef244a545e'
'tasmax_day_MIROC4h_historical_r2i1p1_19930101-19931231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19930101-19931231.nc' 'SHA256' '93d21877d2204ff1d939673f499aca9e9a765d6a4d6a4004bbe48ce2372298ae'
'tasmax_day_MIROC4h_historical_r2i1p1_20010101-20011231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_20010101-20011231.nc' 'SHA256' 'e208bb1de8b84f6438e07507f4921c7b05f9421838d4dc444b9e0b0afadbf531'
'tasmax_day_MIROC4h_historical_r2i1p1_19990101-19991231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19990101-19991231.nc' 'SHA256' '0c7776aac872de63bb129ebf7e15a622fa02312d8a8a8bd0648a14081be3dc51'
'tasmax_day_MIROC4h_historical_r2i1p1_19980101-19981231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19980101-19981231.nc' 'SHA256' '4397f6bf30c8a9f6ce06d785c116a528f0ba21ad5faa7ee4c7631577c4e2e829'
'tasmax_day_MIROC4h_historical_r2i1p1_19880101-19881231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19880101-19881231.nc' 'SHA256' 'd39c9cc3c32fe497d23cc327247c59a51530dc068fa4f125f4b051787f0e3c70'
'tasmax_day_MIROC4h_historical_r2i1p1_19860101-19861231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19860101-19861231.nc' 'SHA256' '4ff44fcb0c5ab2136ff3f48e9812f9cc4dbaa15c67ede905d3148b3e5cbe90af'
'tasmax_day_MIROC4h_historical_r2i1p1_19910101-19911231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19910101-19911231.nc' 'SHA256' '17aac61af9d011beba4935279f374d80ecc9e6b608ea94ec933fdfffb5c4571a'
'tasmax_day_MIROC4h_historical_r2i1p1_19900101-19901231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19900101-19901231.nc' 'SHA256' '5e2748608495dcca770a613db97176380cd0d283147d637800c7619ae661055e'
'tasmax_day_MIROC4h_historical_r2i1p1_19890101-19891231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19890101-19891231.nc' 'SHA256' '66656c05ac600162a219d1c807e89228d3020e379d094b157f8bce1dcf3485cb'
'tasmax_day_MIROC4h_historical_r2i1p1_19870101-19871231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19870101-19871231.nc' 'SHA256' '333358a4840277b714fe866ca4400360c675153df1d47bfae19642bc16bf8847'
'tasmax_day_MIROC4h_historical_r2i1p1_19850101-19851231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19850101-19851231.nc' 'SHA256' 'c811841e0015e6cc11d1645315c4398bd33ed56a9150d08c4f01b0b477b1e96a'
'tasmax_day_MIROC4h_historical_r2i1p1_19840101-19841231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19840101-19841231.nc' 'SHA256' '52c8c36f7dab55f6aa822ab29ff859fbf9f92817d3e9b96733e5a370e05ddf8f'
'tasmax_day_MIROC4h_historical_r2i1p1_19920101-19921231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19920101-19921231.nc' 'SHA256' '3b8eacfa2988d6f78ff0e22c5c4b11dc0f0e2218211d38011165044d2063f7c4'
'tasmax_day_MIROC4h_historical_r2i1p1_19650101-19651231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19650101-19651231.nc' 'SHA256' '15815d67590fd8653b75ee173e2363f32613d1a2b98639329da3d6f0d660e181'
'tasmax_day_MIROC4h_historical_r2i1p1_19640101-19641231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19640101-19641231.nc' 'SHA256' 'd62cc5f18c4830ba023adfb21d746507b5bf518c2912a22d183bea1b3ad92830'
'tasmax_day_MIROC4h_historical_r2i1p1_19630101-19631231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19630101-19631231.nc' 'SHA256' 'ded46414214aeac3ea95c8f8c25965d7b3c7cfd954d21ec727c7fdb2485878e3'
'tasmax_day_MIROC4h_historical_r2i1p1_19620101-19621231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19620101-19621231.nc' 'SHA256' '348b0b74a1e4737da2951e24afeb4df5065fd24e956b7499a6d4a3d4784102c6'
'tasmax_day_MIROC4h_historical_r2i1p1_19610101-19611231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19610101-19611231.nc' 'SHA256' 'f0181b2d0a82748457ec53e4e798eb4dca9d4bb44169e9abda7d39ad4a6ef7de'
'tasmax_day_MIROC4h_historical_r2i1p1_19600101-19601231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19600101-19601231.nc' 'SHA256' '79d2ad5b11495967ec5c80025537131c77839af46f2891cffc41d29fbc02b8d5'
'tasmax_day_MIROC4h_historical_r2i1p1_19590101-19591231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19590101-19591231.nc' 'SHA256' '5cb866b67bb3714dde2278dad65293de4bd4217122f6eedeb22ec049aa8e508c'
'tasmax_day_MIROC4h_historical_r2i1p1_19580101-19581231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19580101-19581231.nc' 'SHA256' 'b91bb23128adf2bc0a887176e76bf37934c6097151f63fff6b24e32e723d528d'
'tasmax_day_MIROC4h_historical_r2i1p1_19570101-19571231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19570101-19571231.nc' 'SHA256' 'a9fabb3555ed6c2c6ff54cb7bdf65a8e255d7c4fa4be55955af3c3d7a58884cf'
'tasmax_day_MIROC4h_historical_r2i1p1_19820101-19821231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19820101-19821231.nc' 'SHA256' '436da5e2edf0f076b6166c9c9b853e5f8d6ebff08960fb44aeaae646d7a6a5fe'
'tasmax_day_MIROC4h_historical_r2i1p1_19770101-19771231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19770101-19771231.nc' 'SHA256' '22fddc8b5e0f346e8b389a2cfe14635d1b5953e2db236e7f2b6598875e049014'
'tasmax_day_MIROC4h_historical_r2i1p1_19750101-19751231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19750101-19751231.nc' 'SHA256' 'c50d8fdc84d8a410e7f20b0df883f439d409862f73485c0c476d7e073cdc90a4'
'tasmax_day_MIROC4h_historical_r2i1p1_19830101-19831231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19830101-19831231.nc' 'SHA256' '7dd64820115277694b190c84df786733de33f54546189c08cc1940647a938f00'
'tasmax_day_MIROC4h_historical_r2i1p1_19810101-19811231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19810101-19811231.nc' 'SHA256' 'b38c0a49be38a01864d0c8db0cc42870ee7767cecd82a32ab8cef5c837f195ad'
'tasmax_day_MIROC4h_historical_r2i1p1_19800101-19801231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19800101-19801231.nc' 'SHA256' '93391c938b7a6744c79c3b4087b8c65c3e7ef033a7d4cd9baf3473c1f910dec5'
'tasmax_day_MIROC4h_historical_r2i1p1_19790101-19791231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19790101-19791231.nc' 'SHA256' 'f3e1efbb177127630b512d817184e8d22e2516c4ddaf9116f6ca2c5a374f5d09'
'tasmax_day_MIROC4h_historical_r2i1p1_19780101-19781231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19780101-19781231.nc' 'SHA256' '162b8c3dc1e82f9d793a0c414a2144f58312f23a569fbc8d334eed0d49f48c4a'
'tasmax_day_MIROC4h_historical_r2i1p1_19760101-19761231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19760101-19761231.nc' 'SHA256' 'b94bc9d01eee13000ccbd862723bf5ebc1cde48f35f71d77aa22fcc3566bc261'
'tasmax_day_MIROC4h_historical_r2i1p1_19710101-19711231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19710101-19711231.nc' 'SHA256' '8e45d322bac7073103a5eb44c8914c8608de4ea06db099017a8504d2765dca05'
'tasmax_day_MIROC4h_historical_r2i1p1_19740101-19741231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19740101-19741231.nc' 'SHA256' '8ac8fd57d373bb18635399981499b5cce627dbb8d04aac4a5adcbf3652319c60'
'tasmax_day_MIROC4h_historical_r2i1p1_19660101-19661231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19660101-19661231.nc' 'SHA256' '33e9f0d390b6617962b1577e9d7efb2080ef0a1e619a860dde91a1462b86b792'
'tasmax_day_MIROC4h_historical_r2i1p1_19730101-19731231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19730101-19731231.nc' 'SHA256' '3749e2aa4b69f213a334191eef051207753ed1a2e6f020a95ce31bcda30748f9'
'tasmax_day_MIROC4h_historical_r2i1p1_19720101-19721231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19720101-19721231.nc' 'SHA256' 'b106a9b82ef041e2454b2164b27f9e71b9981541df695b863c788a568a36c7cc'
'tasmax_day_MIROC4h_historical_r2i1p1_19700101-19701231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19700101-19701231.nc' 'SHA256' '534b1e8cf90dce9cf1ad4cd723f60cf0a9490a1f412d0532ff5f2542bc9d2f45'
'tasmax_day_MIROC4h_historical_r2i1p1_19690101-19691231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19690101-19691231.nc' 'SHA256' '779c1d3491ac1676801d79e05759900d3b5d2f6e605b89a20676ece15206a30c'
'tasmax_day_MIROC4h_historical_r2i1p1_19680101-19681231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19680101-19681231.nc' 'SHA256' 'ec25c8b32e88f21050a668545e24fd7ff2e5e5d47b15efe23e48036c2a8d1380'
'tasmax_day_MIROC4h_historical_r2i1p1_19670101-19671231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19670101-19671231.nc' 'SHA256' 'ed22cad6677d2e2e9ab7244ecd4dec5eba4f7a1cabab607cb3dae8681fbb8e57'
'tasmax_day_MIROC4h_historical_r2i1p1_19560101-19561231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19560101-19561231.nc' 'SHA256' 'ec8bf484eebffe735d98e9978fbdb8f00cba2b23230a7ec93eefa222505ae3c2'
'tasmax_day_MIROC4h_historical_r2i1p1_19550101-19551231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19550101-19551231.nc' 'SHA256' 'ce09068370c24d84b817ed04f561ee691b48c6a5f352d2d87725fb66165d9f13'
'tasmax_day_MIROC4h_historical_r2i1p1_19540101-19541231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19540101-19541231.nc' 'SHA256' '0666445c835c12d38f98d7e1374bc40ef26815c21c91b2c321a6fbb6ca9cdd73'
'tasmax_day_MIROC4h_historical_r2i1p1_19530101-19531231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19530101-19531231.nc' 'SHA256' '60d4d8629c096c277748c43cf4791a817c069df32025edb396cc9892b4b348de'
'tasmax_day_MIROC4h_historical_r2i1p1_19520101-19521231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19520101-19521231.nc' 'SHA256' 'ec90f726cf01720250d2e55d5cdebe3460c6bb3c56631ab44291ce236c4bd035'
'tasmax_day_MIROC4h_historical_r2i1p1_19510101-19511231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19510101-19511231.nc' 'SHA256' 'bebebeed8a71e5e11b9e12be26b2a1c88120113967b78e8ab05f70b1c5e13c43'
'tasmax_day_MIROC4h_historical_r2i1p1_19500101-19501231.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC4h/historical/day/atmos/day/r2i1p1/v20120628/tasmax/tasmax_day_MIROC4h_historical_r2i1p1_19500101-19501231.nc' 'SHA256' 'e601a27a2b33e113030d355612c69c78c29b80d6f466f40b2d00fbb21c6b8f5b'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java is required for retrieving the certificate and couldn't be found."
        exit 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        exit 1
    fi
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    check_java
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    
    #get password
    [[ ! "$pass" ]] && read -sp "MyProxy Password? " pass


    local args=
    [[ "$openId" ]] && args=$args" --oid $openId"
    [[ "$pass" ]] && args=$args" -P $pass"
    [[ "$username" ]] && args=$args" -l $username"
    
    echo -n $'\nRetrieving Credentials...' >&2
    if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
        echo "Certificate could not be retrieved"
        exit 1
    fi
    echo "done!" >&2
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 126 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
